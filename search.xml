<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>D3.js画3D方柱</title>
      <link href="/2019/03/28/D3.js%E7%94%BB3D%E6%96%B9%E6%9F%B1/"/>
      <url>/2019/03/28/D3.js%E7%94%BB3D%E6%96%B9%E6%9F%B1/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>前端笔试面试题总结</title>
      <link href="/2019/03/17/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/17/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>最近趁着金三银四在找工作，总结一下常见笔试面试题</p><h1 id="前端笔试面试题"><a href="#前端笔试面试题" class="headerlink" title="前端笔试面试题"></a>前端笔试面试题</h1><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><h3 id="1-从URL输入到页面展现前发生了什么？"><a href="#1-从URL输入到页面展现前发生了什么？" class="headerlink" title="1. 从URL输入到页面展现前发生了什么？"></a>1. 从URL输入到页面展现前发生了什么？</h3><ul><li>浏览器去查找当前的URL是否有缓存，缓存是否过期，没过期则不会有以下操作</li><li>浏览器通过DNS域名解析拿到服务器IP地址</li><li>根据IP建立TCP连接（3次握手）</li><li>发送HTTP请求</li><li>服务器处理请求并返回响应</li><li>浏览器解析渲染页面</li><li>断开链接，TCP四次挥手<a id="more"></a></li></ul><h4 id="URL：-统一资源定位符，网址"><a href="#URL：-统一资源定位符，网址" class="headerlink" title="URL： 统一资源定位符，网址"></a>URL： 统一资源定位符，网址</h4><p>语法规则： scheme://host:domain:port/path/filename</p><ul><li>scheme 协议，http协议，ftp协议，file协议等</li><li>host 定义域主机（http 的默认主机是 www）</li><li>domain 定义因特网域名 比如w3school.com</li><li>port 端口号</li><li>path 服务器上的路径</li><li>filename 文档/资源的名称</li></ul><p>####域名解析</p><p>域名到IP地址的一个转换过程，由DNS服务器来完成</p><h4 id="TCP连接（3次握手）"><a href="#TCP连接（3次握手）" class="headerlink" title="TCP连接（3次握手）"></a>TCP连接（3次握手）</h4><ul><li>第一次握手 客户端向服务端发送SYN（seq=x）包， 序号为x，并且进入SYN_SENT状态</li><li>第二次握手 服务端收到SYN包，并且向客户确认ACK（ack=x+1），并且也像客户发送SYN包（seq=y），进入SYN_RECV状态，到这为止着两次握手时正常的，必须的，有人会觉得，客服端发起请求，服务端也知道有客户端请求了并且响应了，客户端也收到服务端的响应了，那这样就可以开始传递数据了，为什么还要进行第三次握手？第三次握手时为了防止已经失效的请求突然到了服务端，然后服务端响应了并等待着，其实这时候客户端并没有想发起请求，所以不会理会服务端返回了的响应，所以服务端会一直傻傻的等着，这样会造成资源的浪费。</li><li>第三次握手，客户端收到了SYN+ACK包，并且发送ACK包（ack=y+1），这样服务端就可以确认现在客户端是要传递数据的。</li></ul><h4 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h4><p>请求报文由起始行，请求头，请求体三部分组成</p><h4 id="服务器处理请求并返回"><a href="#服务器处理请求并返回" class="headerlink" title="服务器处理请求并返回"></a>服务器处理请求并返回</h4><p>响应报文由响应行，响应头部，响应主体三个部分组成。</p><p>响应行由协议版本，状态码，状态码描述组成。</p><p>常用状态码</p><ul><li>200 请求成功</li><li>301 资源（网页等）被永久转移到其它URL</li><li>304 请求资源微更新</li><li>400 非法请求，一般是请求参数不对</li><li>404 找不到页面</li><li>500 服务器内部报错</li></ul><h4 id="浏览器解析渲染页面"><a href="#浏览器解析渲染页面" class="headerlink" title="浏览器解析渲染页面"></a>浏览器解析渲染页面</h4><ul><li>根据HTML解析出DOM树</li><li>根据CSS解析生成CSS规则树</li><li>结合DOM树和CSS规则树，生成渲染树</li><li>根据渲染树计算每个节点的信息</li><li>然后根据信息去渲染页面</li></ul><h4 id="断开连接（四次挥手）"><a href="#断开连接（四次挥手）" class="headerlink" title="断开连接（四次挥手）"></a>断开连接（四次挥手）</h4><ul><li>第一次挥手 发起方发送一个fin包（x+2），告诉对方，没有要传递的数据了，要关闭连接。</li><li>第二次挥手 被动方发起报文，ACK，seq，表示同意关闭。</li><li>被动方发送报文，请求关闭，</li><li>发起方发送报文，被动方收到报文后关闭连接，发起方等待一定时间位收到回复，则正常关闭。</li></ul><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="1-js原始类型有哪几种？"><a href="#1-js原始类型有哪几种？" class="headerlink" title="1. js原始类型有哪几种？"></a>1. js原始类型有哪几种？</h3><p>boolean，null，undefined， number，symbol，string</p><h3 id="2-对象类型和原始类型的不同？"><a href="#2-对象类型和原始类型的不同？" class="headerlink" title="2. 对象类型和原始类型的不同？"></a>2. 对象类型和原始类型的不同？</h3><p>原始类型存储的是值，对象类型存储的是值的地址。</p><pre><code>let a = []let b = aa.push(1)console.log(a) // [1]console.log(b) // [1]</code></pre><h2 id="CSS-3"><a href="#CSS-3" class="headerlink" title="CSS(3)"></a>CSS(3)</h2><h3 id="css3六大新特性"><a href="#css3六大新特性" class="headerlink" title="css3六大新特性"></a>css3六大新特性</h3><ol><li>边框<ul><li>border-radius</li><li>box-shadow</li><li>border-image</li></ul></li><li>背景<ul><li>background-size 背景大小</li><li>background-origin 背景定位 值可以为content-box、padding-box 或 border-box</li><li>多重背景图片 background url(),url()</li><li>background-clip 背景切割</li></ul></li><li>文本效果<ul><li>text-shadow ie10+</li><li>word-wrap</li></ul></li><li>字体<ul><li>@font-face{font-family: myFont,src: url()} 使用 font-family: myFont</li></ul></li><li><p>2D转换</p><ul><li>移动translate() </li><li>缩放scale()</li><li>转动rotate()</li><li>翻转skew()</li><li>所有混合matrix() 方法</li></ul></li><li><p>3D转换</p></li><li>过渡</li><li>动画</li><li>多列</li><li>用户界面</li></ol><h2 id="html-5"><a href="#html-5" class="headerlink" title="html(5)"></a>html(5)</h2><h3 id="1-html5新特性"><a href="#1-html5新特性" class="headerlink" title="1. html5新特性"></a>1. html5新特性</h3><ol><li>语义化标签 section，header，footer， nav</li><li>增强型表单 type = date，datalist</li><li>视频，音频</li><li>svg</li><li>canvas</li><li>storage</li><li>定位</li><li>拖放</li><li>web worker</li><li>socket</li></ol><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h2 id="智力"><a href="#智力" class="headerlink" title="智力"></a>智力</h2>]]></content>
      
      
        <tags>
            
            <tag> 笔试面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git浅解</title>
      <link href="/2018/09/05/Git%E6%B5%85%E8%A7%A3/"/>
      <url>/2018/09/05/Git%E6%B5%85%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="Git浅解"><a href="#Git浅解" class="headerlink" title="Git浅解"></a><center>Git浅解</center></h1><h2 id="一、为什么选择Git"><a href="#一、为什么选择Git" class="headerlink" title="一、为什么选择Git"></a>一、为什么选择Git</h2><p>比如我们写东西的时候刚开始写了一部分，先保存为了文章1，然后后续写的时候，改了一些东西，删除了之前的一部分，但是你又可能需要之前的部分，所以你会另存为文章2，所以这样下去，等你的文章写完，可能会有文章1,2,3,4。。。很多个副本，然后你想去找其中的一段，但是又可能不记得在哪了，所以要一个个文件查看，这样就没有效率，重复做了很多事情，而且很乱。</p><p>然后Git可以帮你解决这些问题，它能帮我们记录每次文件的改动，而且可以多人协同完成，这样我们可以快速，高效的进行版本管理。</p><p>GIt是分布式版本控制系统。</p><p>Git不需要联网，每个人都可以拷贝一份完整的版本库到本地，然后在本地进行一系列操作。</p><h2 id="二、学习Git前须知"><a href="#二、学习Git前须知" class="headerlink" title="二、学习Git前须知"></a>二、学习Git前须知</h2><h3 id="（1）git文件的四种状态"><a href="#（1）git文件的四种状态" class="headerlink" title="（1）git文件的四种状态"></a>（1）git文件的四种状态</h3><ol><li>modified 修改了，但没有被保存在本地版本库</li><li>staged（已暂存）</li><li>untracked（）</li><li>commit（已提交）</li></ol><h3 id="（2）git的五个区域"><a href="#（2）git的五个区域" class="headerlink" title="（2）git的五个区域"></a>（2）git的五个区域</h3><h2 id="三、一般使用Git的流程"><a href="#三、一般使用Git的流程" class="headerlink" title="三、一般使用Git的流程"></a>三、一般使用Git的流程</h2>]]></content>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《JavaScript高级程序设计》DOM扩展</title>
      <link href="/2018/09/04/%E3%80%8AJavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8BDOM%E6%89%A9%E5%B1%95/"/>
      <url>/2018/09/04/%E3%80%8AJavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8BDOM%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h1 id="DOM扩展"><a href="#DOM扩展" class="headerlink" title="DOM扩展"></a><center>DOM扩展</center></h1><h2 id="一、选择符API（重要）"><a href="#一、选择符API（重要）" class="headerlink" title="一、选择符API（重要）"></a>一、选择符API（重要）</h2><p>平时我们写代码的时候最常用的一个操作就是根据css选择符选择与某个模式匹配的DOM元素，比如$(“css选择符”)。但是用jquery的话我们必须引用jquery库。现在我们可以不需要引js库就可以实现这个功能。</p><p>选择符API的核心是两个方法：querySelector()和querySelectorAll()。还有一个matchesSelector()方法。</p><p>Document、Element，DocumentFragment三种类型的元素都有这两个方法。<br><a id="more"></a><br>兼容性(2018.09.04查询)<br><img src="/2018/09/04/《JavaScript高级程序设计》DOM扩展/jrx.png" alt=""></p><h3 id="1-querySelector"><a href="#1-querySelector" class="headerlink" title="1. querySelector()"></a>1. querySelector()</h3><p>该方法接收一个css选择器，返回与该模式匹配的第一个元素，如果没有找到匹配的元素，则会返回null。如果传入了不被支持的选择符，会报错。</p><p>通过Document类型调用该方法，会在文档元素的范围内查找匹配的元素。而通过Element类型调用，只会在该元素后代元素范围内查找匹配的元素。</p><p><code>html</code></p><pre><code>&lt;span class=&quot;outside&quot;&gt;outside&lt;/span&gt;&lt;div id=&quot;my-id&quot;&gt;        &lt;span class=&quot;outside&quot;&gt;my-id outside&lt;/span&gt;     &lt;span id=&quot;inside&quot;&gt;inside&lt;/span&gt;     &lt;div class=&quot;lonely&quot;&gt;lonely&lt;/div&gt;     &lt;div class=&quot;outer&quot;&gt;          &lt;div class=&quot;inner&quot;&gt;inner&lt;/div&gt;     &lt;/div&gt;&lt;/div&gt;</code></pre><p>Document</p><p><code>js</code></p><pre><code>var lonely = document.querySelector(&quot;#my-id .lonely&quot;);var outside1 = document.querySelector(&quot;#outside1&quot;); //nullvar inside = document.querySelector(&quot;#.inside&quot;);//报错</code></pre><p>结果：</p><p><img src="/2018/09/04/《JavaScript高级程序设计》DOM扩展/querySelector.png" alt=""></p><p>Element</p><pre><code>var myId = document.querySelector(&quot;#my-id&quot;);var outer = myId.querySelector(&quot;.outer&quot;);var outside = myId.querySelector(&quot;.outside&quot;);</code></pre><p><img src="/2018/09/04/《JavaScript高级程序设计》DOM扩展/querySelector-element.png" alt=""></p><h3 id="2-querySelectorAll"><a href="#2-querySelectorAll" class="headerlink" title="2.querySelectorAll()"></a>2.querySelectorAll()</h3><p>该方法接收的参数也是一个css选择符，返回的是一个NodeList的实例，返回的是所有匹配的元素而不仅仅是返回的一个元素。</p><p>NodeList 对象是一个节点的集合，是由 Node.childNodes 和 document.querySelectorAll 返回的.</p><p>大多数情况下，我们使用Node.childNodes返回的NodeList是一个实时的集合，也就是页面节点又变化是，NodeList会跟着改变。</p><pre><code>var myId = document.querySelector(&quot;#my-id&quot;);var childNodes = myId.childNodes; //9myId.appendChild(document.createElement(&apos;div&apos;));var childNodes2 = myId.childNodes;//10</code></pre><p><img src="/2018/09/04/《JavaScript高级程序设计》DOM扩展/childnodes.png" alt=""> </p><p>querySelectorAll()返回的是一个静态的nodeList，是一个快照。这样可以避免使用NodeList对象通常会引起的大多数性能问题。</p><pre><code>var myId = document.querySelector(&quot;#my-id&quot;);var nodes = document.querySelectorAll(&quot;div&quot;);console.log(&quot;nodes:&quot;);console.log(nodes);myId.appendChild(document.createElement(&apos;div&apos;));var nodes2 = document.querySelectorAll(&quot;div&quot;);console.log(&quot;nodes2:&quot;);console.log(nodes2);console.log(&quot;nodes:&quot;);console.log(nodes);</code></pre><p><img src="/2018/09/04/《JavaScript高级程序设计》DOM扩展/querySelectorAll.png" alt=""></p><p> 只要传给querySelectorAll()方法的css选择符有效，该方法都会返回一个NodeList对象，如果没有找到匹配的元素，NodeList就是空的。  </p><pre><code>var aNodes = document.querySelectorAll(&quot;a&quot;);   console.log(&quot;aNodes&quot;);console.log(aNodes);</code></pre><p><img src="/2018/09/04/《JavaScript高级程序设计》DOM扩展/nodelist-null.png" alt=""><br>思考：下面两个获取方法得到的内容是一样的么？</p><pre><code>var div = document.querySelectorAll(&quot;#my-id div div&quot;);console.log(&quot;div:&quot;);console.log(div);var div2 = document.querySelector(&quot;#my-id&quot;).querySelectorAll(&quot;div div&quot;);console.log(&quot;div2:&quot;);console.log(div2);</code></pre><p><img src="/2018/09/04/《JavaScript高级程序设计》DOM扩展/querySelectorAll2.png" alt=""></p><p>原因：CSS选择器是独立于整个页面的！</p><p>这里的querySelectorAll里面的选择器也同样是这也全局特性。document.querySelector(“#my-id”).querySelectorAll(“div div”)翻译成白话文就是：查询#my-id的子元素，同时满足整个页面下div div选择器条件的DOM元素们。</p><p>使用场景？</p><h3 id="3-matchesSelector（）方法"><a href="#3-matchesSelector（）方法" class="headerlink" title="3.matchesSelector（）方法"></a>3.matchesSelector（）方法</h3><p>这个方法接收一个参数，css选择符，如果调用元素与该选择符匹配，返回true，否则为false。</p><p>if(document.body.webkitMatchesSelector(“body”)){<br>        console.log(“webkitMatchesSelector”);<br>    }</p><h2 id="二、元素遍历"><a href="#二、元素遍历" class="headerlink" title="二、元素遍历"></a>二、元素遍历</h2><p> 对于元素间的空格，IE9及之前的版本不会返回文本节点，这样就导致了在使用childNodes和firstChild等属性时行为不一致。</p><p> 所以Element Traversal API 为DOM元素添加了以下5个属性。</p><p> childElementCount： 返回子元素（不包括文本节点和注释）的个数</p><p> firstElementChild：只想第一个子元素</p><p> lastElementChild： 指向最后一个元素</p><p> previousElmentSlibling：指向前一个同辈元素</p><p> nextElementSibling：指向后一个同辈元素</p><h2 id="三、HTML5（重要）"><a href="#三、HTML5（重要）" class="headerlink" title="三、HTML5（重要）"></a>三、HTML5（重要）</h2><h3 id="1-与类相关的扩充"><a href="#1-与类相关的扩充" class="headerlink" title="1.与类相关的扩充"></a>1.与类相关的扩充</h3><ol><li><p>getElementsByClassName()<br> 该方法接收一个参数，即包含一或多个类名的字符串，返回带有指定类的所有元素的NodeList。类名的先后顺序无所谓。</p></li><li><p>classLists属性</p><pre><code>&lt;div id=&quot;dd&quot; class=&quot;bd user do&quot;&gt;2222&lt;/div&gt;var dd = document.querySelector(&quot;#dd&quot;);console.log(dd.classList);</code></pre></li></ol><p>add(value): 将给定的字符串添加到列表中，如果值有，就不添加</p><p>contains(value): 表示列表中是否存在给定的值，如果存在则返回true，如果不存在false</p><p>remove(value):从列表中删除给定的字符串</p><p>toggle(value):如果列表中已经存在给定的值，删除它，如果列表中每一给定的值，添加它。</p><h3 id="2-自定义数据属性"><a href="#2-自定义数据属性" class="headerlink" title="2 自定义数据属性"></a>2 自定义数据属性</h3><p>html5规定要添加非标准的属性，但是要加前缀data-，目的是为元素提供与渲染无关的信息，或者提供语义信息</p><p>例如：</p><pre><code>&lt;div id=&quot;myDiv&quot; data-appId=&quot;123&quot; data-myname=&quot;hzq&quot;&gt;</code></pre><p>t添加了自定义属性后，我们可以通过元素的dataset属性来访问自定义属性的值</p><h3 id="3-插入标记"><a href="#3-插入标记" class="headerlink" title="3.插入标记"></a>3.插入标记</h3><p>使用场景：</p><p>我们需要给文档插入大量新的标记，我们不仅要创建一系列DOM节点，然后还要小心的按照正确的顺序把他们连接起来。</p><h4 id="a：innerHTML属性"><a href="#a：innerHTML属性" class="headerlink" title="a：innerHTML属性"></a>a：innerHTML属性</h4><p>在读模式，innerHTML属性返回与调用元素的所有子节点（包括元素，注释和文本节点）对应的HTML标记。</p><p>在写模式，innnerHTML会根据制定的值创建新的DOM树，然后用这个DOM树完全替换调用元素原先的所有子节点。</p><pre><code>&lt;div id=&quot;content&quot;&gt;    &lt;p&gt;hello&lt;/p&gt;    &lt;ul&gt;        &lt;li&gt;item 1&lt;/li&gt;        &lt;li&gt;item 1&lt;/li&gt;        &lt;li&gt;item 1&lt;/li&gt;     &lt;/ul&gt; &lt;/div&gt;var innerHTML = document.querySelector(&quot;#content&quot;).innerHTML;console.log(innerHTML);</code></pre><p>返回的是</p><pre><code>&lt;p&gt;hello&lt;/p&gt;    &lt;ul&gt;        &lt;li&gt;item 1&lt;/li&gt;        &lt;li&gt;item 1&lt;/li&gt;        &lt;li&gt;item 1&lt;/li&gt;    &lt;/ul&gt;</code></pre><p> 写模式：</p><pre><code>document.querySelector(&quot;#content&quot;).innerHTML = &quot;&lt;p&gt;hello,world&lt;/p&gt;&quot;;   var innerHTML = document.querySelector(&quot;#content&quot;).innerHTML; console.log(innerHTML);//&lt;p&gt;hello,world&lt;/p&gt;</code></pre><p>并不是所有元素都支持innerHTML属性，不支持的有：<br>    <code>&lt;col</code>&gt;,<code>&lt;colgroup</code>&gt;,<code>&lt;frameset&gt;</code>,<code>&lt;head&gt;</code>,<code>&lt;html&gt;</code>,<code>&lt;style&gt;</code>,<code>&lt;table&gt;</code>,<code>&lt;tbody&gt;</code>,<code>&lt;thead&gt;</code>,<code>&lt;tfoot&gt;</code>,<code>&lt;tr&gt;</code></p><h4 id="b-outerHTML"><a href="#b-outerHTML" class="headerlink" title="b: outerHTML"></a>b: outerHTML</h4><p>在读模式，outerHTML返回调用它的元素及所有子节点的HTML标签，在写模式下，outerHTML会根据制定的HTML字符串去创建新的DOM子树，然后用这个DOM树去完全替换调用元素。</p><h4 id="c：内存与性能问题"><a href="#c：内存与性能问题" class="headerlink" title="c：内存与性能问题"></a>c：内存与性能问题</h4><p>我们在使用这两个属性时，可能删除了之前的元素，元素上有一个事件处理程序，从文档树中删除了元素，但是元素与事件处理程序之间的绑定关系在内存中并没有删除，这样日积月累，页面占有的内存会越来越多，所以我们使用上面的方法时最好手动删除要被删除的元素的事件处理程序和js对象属性。</p><h3 id="4-scrollIntoView"><a href="#4-scrollIntoView" class="headerlink" title="4.scrollIntoView()"></a>4.scrollIntoView()</h3><p>为了方便开发人员更好的控制页面滚动，HTML5选择了scrollIntoView()作为标准方法。</p><p>scrollIntoView()可以在所有HTML元素上调用，通过滚动浏览器窗口或者某个容器元素，调用元素就会出现在视口中。如果给这个方法传入true作为参数，或者不传入参数，那么窗口滚动之后会 让调用元素的顶部与视口顶部尽可能齐平。如果传入false作为参数，调用元素会尽可能全部出现在视口中，可能的话调用元素的底部会与视口底部齐平。</p><p>移动端开发可能用的比较多，input和键盘。</p>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>变基git rebase中的基是什么</title>
      <link href="/2018/08/28/%E5%8F%98%E5%9F%BAgit-rebase%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2018/08/28/%E5%8F%98%E5%9F%BAgit-rebase%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<h1 id="变基-git-rebase-中的基是什么？"><a href="#变基-git-rebase-中的基是什么？" class="headerlink" title="变基(git rebase)中的基是什么？"></a>变基(git rebase)中的基是什么？</h1><p>git rebase 在官网中的定义是：重新应用commits到要合并到的分支的顶端。（一个英语渣的直译，见笑了）。其实也可以这么说是重新应用commits到要合并到的分支的最新提交。如果现在还没有理解，没有关系，现在我开始仔细说明git rebase都干了什么。</p><p>假设我们现在是A研发人员，此时本地分支是master,然后远程有两个分支：origin/master,origin/develop。此时我们接到一个任务，我们要在develop分支上开发一个功能，所以此时我们要切换分支。<br><a id="more"></a></p><p><img src="/2018/08/28/变基git-rebase中的基是什么/changj.png" alt=""></p><p>切换分支我们需要用到的命令是：</p><pre><code>git checkout -b local_develop origin/develop</code></pre><p>该命令其实做了两个操作，第一个是拷贝了远程的origin/develop到本地，致使本地多了一个分支，第二个是把该分支命名为local_develop。</p><p>假设此时远程的origin/develop分支上已经有两个提交。，所以我们查看远程分支的日志（git log origin/develop）可以看到提交的树状图如下：</p><p><img src="/2018/08/28/变基git-rebase中的基是什么/001.png" alt=""></p><p>此时你本地的提交日志（git log）的树状图如下：</p><p><img src="/2018/08/28/变基git-rebase中的基是什么/002.png" alt=""></p><p>经过一段时间，你把功能开发完成了，此时提交代码(git commit -m “[+]添加功能”)，把你本地的代码提交到远程分支上。这时候你发现在你提交之前，有其他的同事在develop分支（这里指的是origin/develop）上提交了两次代码。所以此时的树状图是这样的：远程分支的提交已经有四次了，此时你的提交编号应该为5.</p><p><img src="/2018/08/28/变基git-rebase中的基是什么/003.png" alt=""></p><p>commit后，如果有修改过但是未commit的文件，我们应该执行驻藏命令 git stash 将这些文件保留到驻藏区，然后进行代码的拉取git fetch ，然后执行合并分支，git rebase. </p><p>该命令会执行两个步骤，第一个是把你本地分支的新添加的全部的commit的补丁（patch）,我理解为是备份，也就是把他们的备份临时放到.git/rebase目录下，然后把commit撤销掉。<br>也就是这样：</p><p><img src="/2018/08/28/变基git-rebase中的基是什么/004.png" alt=""></p><p>第二个步骤是在要合并到的分支（origin/develop）的最新的commit的基础上应用这些补丁。也就是把4和5’进行合并，然后推送代码 git push.</p><p><img src="/2018/08/28/变基git-rebase中的基是什么/005.png" alt=""></p><p>到这里，我们可以知道变基的基是什么了吧。就是要要合并到的分支（origin/develop）的最新的提交（在上面例子里，这个基就是4）。</p><p>明白了git rebase的操作后，我们可以发现，如果使用git rebase命令来合并分支的话，分支的树状图都是“单线”，都是一条直线。这样的树状图是非常优美的。</p><p>现在我们也可以来了解一下另一个合并分支的命令(git merge).</p><p>merge命令非常简单粗暴，就是把你本地最新的提交和远程最新的提交合并一下，得到一份最新的提交。</p><p><img src="/2018/08/28/变基git-rebase中的基是什么/006.png" alt=""></p><p>用merge命令的话树状图就会看着很乱，有各种线交叉，看着非常不友好。</p><p>所以拉代码推荐git fetch + git rebase.</p>]]></content>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript的創建方法</title>
      <link href="/2018/08/23/JavaScript%E7%9A%84%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
      <url>/2018/08/23/JavaScript%E7%9A%84%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript创建对象的几种方法"><a href="#JavaScript创建对象的几种方法" class="headerlink" title="JavaScript创建对象的几种方法"></a>JavaScript创建对象的几种方法</h1><h2 id="一、理解对象"><a href="#一、理解对象" class="headerlink" title="一、理解对象"></a>一、理解对象</h2><p>ECMA-262把对象定义为： 无序属性的集合，其属性可以包含基本值，对象或者函数。每个对象都是基于一个引用<br>类型创建的，这个引用类型可以是原生类型，比如Object，Array等，也可以是自己定义的类型。<a id="more"></a></p><h2 id="二、常用方法"><a href="#二、常用方法" class="headerlink" title="二、常用方法"></a>二、常用方法</h2><h3 id="（1）创建单个对象"><a href="#（1）创建单个对象" class="headerlink" title="（1）创建单个对象"></a>（1）创建单个对象</h3><p>情景模式： 现在我们要创建一家公司的人员。<br>创建单个对象，也就是我们要创建一个人员。</p><h4 id="a-创建Object实例"><a href="#a-创建Object实例" class="headerlink" title="a. 创建Object实例"></a>a. 创建Object实例</h4><pre><code>传说女娲造人，Object其实可以想象成女娲，所有的对象都是Object的实例。   var person = new Object();   person.name = &quot;zzilcc&quot;;   person.age = 23;</code></pre><p>new 其实做了四件事情。</p><pre><code>1. 创建了一个对象2. 把当前作用域赋值给这个对象3. 执行构造函数里的代码4. 返回这个对象但是我们更常用的方法是对象字面量方法。简单好理解。</code></pre><h4 id="b-对象字面量方法"><a href="#b-对象字面量方法" class="headerlink" title="b .对象字面量方法"></a>b .对象字面量方法</h4><pre><code>var person = {    name: &quot;bbb&quot;,    age: 23,    sayName: function(){        console.log(this.name);    }}</code></pre><h3 id="2-创建多个对象"><a href="#2-创建多个对象" class="headerlink" title="(2) 创建多个对象"></a>(2) 创建多个对象</h3><h4 id="a-工厂模式"><a href="#a-工厂模式" class="headerlink" title="a. 工厂模式"></a>a. 工厂模式</h4><p>此时，如果我们要创建多个人员，我们可能会这样写</p><pre><code>var person1 = new Object();person1.name = &quot;aaa&quot;;person1.age = 23;person1.sayName = function(){    console.log(this.name);};var person2 = new Object();person2.name = &quot;bbb&quot;;person2.age = 23;person2.sayName = function(){    console.log(this.name);};var person3 = new Object();person3.name = &quot;ccc&quot;;person3.age = 23;person3.sayName = function(){    console.log(this.name);};var person4 = new Object();person4.name = &quot;ddd&quot;;person4.age = 23;person4.sayName = function(){    console.log(this.name);};</code></pre><p>这是我们会发现，我们写了大量重复的代码，能不能把相同代码放到一起，每次调用一下就好了，所以就有了工厂模式。</p><pre><code>function  createPerson (name,age) {    var o = new Object();    o.name = name;    o.age = age;    o.sayName = function(){        console.log(this.name);    }}var person1 = createPerson(&quot;aaa&quot;,23);var person2 = createPerson(&quot;bbb&quot;,21);var person3 = createPerson(&quot;ccc&quot;,24);var person4 = createPerson(&quot;ddd&quot;,22);</code></pre><p>这样我们创建相似对象就可以减少重复代码量。但是这个方法有的缺点就是无法解决对象识别的问题。也就是通过工厂模式产生的对象只能知道是“女娲”（object）造出来的实例，他们之间不能细分到是这是男人还是女人。</p><h4 id="b-构造函数模式"><a href="#b-构造函数模式" class="headerlink" title="b. 构造函数模式"></a>b. 构造函数模式</h4><p>这时候构造函数模式就可以解决对象识别的问题了。因为构造函数可以用来创建特定类型的对象。构造函数可以想象成女娲的各种法术，一种法术产生一种类型的人员，比如这种法术是生成“女性”，那种法术是生成“男性”。构造函数有原生构造函数和自定义的构造函数，非常人性化。</p><pre><code>function Male(name,age){    this.sex = &quot;male&quot;;    this.name = name;    this.age = age;    this.sayName = function(){        console.log(this.name)    }}var male1 = Male(&quot;aa&quot;,23);var male2 = Male(&quot;xx&quot;,22);按照惯例，构造函数的函数名首字母要大写。我们可以通过instanceof操作符检测对象类型。使用构造函数意味着把它实例标识为一种特定的类型，比如男人，女人，老人，小孩等等。这也是工厂函数无法解决的问题。console.log(male1 instanceof Object); //trueconsole.log(male2 instanceof Object); //trueconsole.log(male1 instanceof Male); //trueconsole.log(male1 instanceof Male); //true</code></pre><p>male1,,male2是Object的实例，也是Male的实例。</p><p>但是这个方法也是有自己的缺点的，也就是每个方法都要在每个实例上重新创建一遍。</p><pre><code>function Male(name,age){    this.sex = &quot;male&quot;;    this.name = name;    this.age = age;    this.sayName = function(){        console.log(this.name)    }}</code></pre><p>也就是我们每次new Male()的时候，我们都要去重新创建一次sayName方法。<br>        因为函数也是一个对象，所以上面的函数我们可以改写成</p><pre><code>function Male(name,age){        this.sex = &quot;male&quot;;        this.name = name;        this.age = age;        this.sayName = new Function(&quot;console.log(this.name)&quot;);    }</code></pre><p>也就是我们每次new Male()的时候我们都创建了一个Function的实例，那为什么我们不能在全局环境中创建一个，然后再Male函数里调用。</p><p>所以我们可以改写成下面这样：</p><pre><code>function Male(name,age){        this.sex = &quot;male&quot;;        this.name = name;        this.age = age;        this.sayName = sayName;    }    function sayName(){        console.log(this.name);    }</code></pre><p>但是这么干的话，其实也不合适，因为sayName函数明明是为你Male所用的，但是你却把它放到全局里，这不符合全局的概念。<br>而且要是构造很熟有很多函数的话，那么全局作用域就有很多“全局”函数，那样我们自定义的引用类型就没有封装性可言了。</p><h4 id="c-原型模式"><a href="#c-原型模式" class="headerlink" title="c. 原型模式"></a>c. 原型模式</h4><p>我们创建的每个函数都有一个原型（prototype）属性,这个属性是一个指针，指向一个对象。这个对象包含了一些属性和方法，这些属性和方法是被特定类型的所有实例共享的。也就是说prototype是我们通过构造函数创建的对象实例的原型对象。也就是我们把想要所有对象实例都共享的方法和实行都添加到原型中，而不是构造函数中。</p><pre><code>funtiton Person(){};Person.prototype.name = &quot;aa&quot;;Person.prototype.age = 23;Person.sayName.sayName = function() {    console.log(this.name)}var person1 = new Person();person1.sayName();//&quot;aa&quot;</code></pre><p>我们把公用属性和方法放到了Person的原型中， 所以每个实例访问的都是同一组属性和同一个方法。这样就不用把方法放到全局环境去写了，就解决了构造函数把私有方法放到全局的问题</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript对象 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue指令</title>
      <link href="/2018/07/16/vue%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/07/16/vue%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h1><p>这章介绍的是vue的一些指令，是以“v-”开头的指令，它的值预估是单个<br>JavaScript表达式(v-for例外)。指令的作用是在表达式的值改变的时候，<br>将产生的影响，响应的作用在DOM上。<a id="more"></a></p><h2 id="v-if、v-else和v-else-if"><a href="#v-if、v-else和v-else-if" class="headerlink" title="v-if、v-else和v-else-if"></a>v-if、v-else和v-else-if</h2><p>使用场景：我们需要进行条件判断来决定这个元素是否显示的时候，就需要用到这些指令。</p><p>有v-else指令的元素必须跟在带有v-if或者v-else-if的元素后面，否则将不会被识别</p><p>使用方法：</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;div v-if=&quot;param&quot;&gt;        登陆成功       &lt;!--param的值为true的时候--&gt;    &lt;/div&gt;    &lt;div v-else&gt;        请登录    &lt;!--param的值为false的时候--&gt;    &lt;/div&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        param: true    }});</code></pre><p>v-else-if 是在2.1.0版本新增的一个指令。学过c,c++,java语言的都应该可以理解，也就是否则如果，可以连续使用，该指令也是只能跟在v-if后面。</p><p>使用方法：</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;div v-if=&quot;param===0&quot;&gt;         &lt;!--param的值为0的时候--&gt;    &lt;/div&gt;    &lt;div v-else-if=&quot;param===1&quot;&gt;         &lt;!--param的值为1的时候--&gt;    &lt;/div&gt;    &lt;div v-else-if=&quot;param===2&quot;&gt;         &lt;!--param的值为2的时候--&gt;    &lt;/div&gt;    &lt;div v-else&gt;         &lt;!--param的值是非1，非2，非0的时候--&gt;    &lt;/div&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        param: 0    }});</code></pre><h2 id="v-show和v-once"><a href="#v-show和v-once" class="headerlink" title="v-show和v-once"></a>v-show和v-once</h2><p>v-show指令也是用于条件展示的，用法和v-if一样，只不过没有v-else指令在后面。</p><p>不同的是带有v-show的元素是一开始就会被渲染并保留在DOM中，它是决定的是css属性display来显示或者不显示元素。而v-if是条件渲染，为真才渲染，若为假是不会渲染出相应的元素的，也就是为假的时候DOM上是找不到该元素的。</p><p>v-once顾名思义，一次性的插值。</p><p>此时渲染结果为 Hello!,若是后期我们把message的值改为Hello,world！,元素p里的内容还是Hello!，不会随着data里的message的改变而改变</p><h2 id="v-text和v-html"><a href="#v-text和v-html" class="headerlink" title="v-text和v-html"></a>v-text和v-html</h2><p>v-text的作用等价于两个双括号,用两个双括号不好的地方是当网速很慢或者js报错的时候，会直接显示两个双括号，但是使用v-text就不会，所以在实际开发的时候，建议使用v-text。</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;p&gt;{{message}}&lt;/p&gt; == &lt;p v-text=&quot;message&quot;&gt;&lt;/p&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        message: &quot;Hello!&quot;    }});</code></pre><p>v-html: 会将元素当成html标签解析然后输出。</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;p v-text=&quot;message&quot;&gt;&lt;/p&gt;    &lt;p v-html=&quot;message&quot;&gt;&lt;/p&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        message: &quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;    }});</code></pre><p>输出结果为：</p><p><img src="/2018/07/16/vue指令/v-html.png" alt=""></p><p>注意： 在站点上动态的渲染任意的HTML可能会很危险，因为它很容易导致XSS攻击，所以最好慎用。</p><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>v-bind一般用来绑定元素属性，属性值可以是字符串，对象或数组。可以用来绑定class、style或者是图片，链接的地址属性src、href等。v-bind可以简写成“:”。</p><pre><code>&lt;style&gt;.fd-head {    color: red;}.fd-nav {    background-color: yellow;}.active {    font-size: 20px;}.text-danger {    color: red;    border: 1px solid &apos;#000&apos;;}&lt;/style&gt;&lt;div id=&quot;app&quot;&gt;    &lt;h1&gt;1. 绑定到src和href属性上&lt;/h1&gt;        &lt;img v-bind:src=&quot;imgSrc&quot;&gt;        &lt;a :href=&quot;url&quot;&gt;github传送门&lt;/a&gt;    &lt;h1&gt;2. 绑定到样式&lt;/h1&gt;        &lt;div :class=&quot;{&apos;fd-head&apos;:isOk, &apos;active&apos;:isActive}&quot;&gt;            &lt;p&gt;(1)一般绑定方法&lt;/p&gt;            字体为红色        &lt;/div&gt;        &lt;div class=&quot;fd-nav&quot; :class=&quot;{&apos;fd-head&apos;:isOk, &apos;active&apos;:isActive}&quot;&gt;            &lt;p&gt;(2)v-bind:class也可以与普通的class属性共存&lt;/p&gt;            字体为红色且背景颜色为黄色        &lt;/div&gt;        &lt;div :class=&quot;isTrue?fd-head:active&quot;&gt;            &lt;p&gt;用三元运算符来选择样式,字体大小为20px&lt;/p&gt;        &lt;/div&gt;        &lt;div :class=&quot;[activeClass,errorClass]&quot;&gt;            绑定到数组        &lt;/div&gt;    &lt;h1&gt;3. 绑定内联样式style&lt;/h1&gt;        &lt;h2&gt;对象语法&lt;/h2&gt;        &lt;div :style=&quot;{color:activeColor,fontSize:fontSize + &apos;px&apos;,&apos;background-color&apos;:bgcolor}&quot;&gt;            (1)我们给:style赋值的是一个对象，该对象语法看上去有点像css，但其实是一个JavaScript对象，css的属性名可以用驼峰式，这样就需要用括号括起来，或者用短横线分隔，这样就需要用括号括起来。        &lt;/div&gt;        &lt;div :style=&quot;styleObj1&quot;&gt;            &lt;p&gt;(2)或者我们直接绑定到一个样式对象，这样比较简单明了。        &lt;/div&gt;        &lt;h2&gt;数组语法&lt;/h2&gt;        &lt;div :style=&quot;[styleObj1,styleObj2,styleObj3]&quot;&gt;            &lt;p&gt;数组语法可以将多个样式对象应用到同一个元素上。        &lt;/div&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        imgSrc: &quot;http://2b.zol-img.com.cn/product/131/741/ceUvYp3mRk5w.jpg&quot;,        url: &quot;https://github.com/zzilcc&quot;,        isOk: true,        isActive: false,        isTrue: false,        activeClass: &apos;active&apos;,        errorClass: &apos;text-danger&apos;,        activeColor: &apos;red&apos;,        &apos;fd-head&apos;: &apos;fd-head&apos;,        active: &apos;active&apos;,        fontSize: 30,        bgcolor: &apos;blue&apos;,        styleObj1: {            color: &apos;red&apos;,            fontSize: &apos;13px&apos;        },        styleObj2: {            position: &apos;relative&apos;        },        styleObj3: {            backgroundColor: &apos;blue&apos;        }    }})</code></pre><p>结果为：<br><img src="/2018/07/16/vue指令/v-bind1.png" alt=""></p><p><img src="/2018/07/16/vue指令/v-bind2.png" alt=""></p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>v-model指令主要用来在表单<code>&lt;input&gt;</code>及<code>&lt;textarea&gt;</code>元素上进行双向数据绑定。v-model会忽略所有表单元素的value,checked,selected特性的初始值，而总是将Vue实例的数据当做数据来源。</p><h3 id="文本绑定"><a href="#文本绑定" class="headerlink" title="文本绑定"></a>文本绑定</h3><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;input v-model=&quot;message&quot; placeholder=&quot;请输入&quot;&gt;    &lt;p&gt; Message is : &lt;span v-text=&quot;message&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        message: &quot;&quot;    }})</code></pre><p><img src="/2018/07/16/vue指令/v-model1.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue基础</title>
      <link href="/2018/07/16/vue%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/07/16/vue%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="Vue-js是什么"><a href="#Vue-js是什么" class="headerlink" title="Vue.js是什么"></a>Vue.js是什么</h2><p>Vue是一个前端框架，官方的解释是一套用于构建用户界面的渐进式框架。相对于React,AngularJS框架来说是比较轻量级的，然后比较容易上手，所以一开始选择学哪个框架的时候就选择了Vue,正好入职的第一家公司也是使用这个框架。<br><a id="more"></a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Vue有两个版本，一个开发版本，包含完整的警告和调试模式；一个是生产版本，删除了警告，进行了压缩。</p><p>GitHub地址传送门：<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">github</a></p><h2 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h2><p>我们一般通过Vue函数创建一个新的Vue实例。</p><pre><code>var vue = new Vue({    //选项});</code></pre><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><p>Vue是声明式渲染，这是Vue的核心，我看过比较好的解释就是“我们只需要告诉程序我们想要什么效果，其他交给程序去做”。</p><p>官网的例子就很好理解：</p><pre><code>&lt;div id=&quot;app&quot;&gt;    {{message}} //Hi&lt;/div&gt;var vue = new Vue ({    el: &quot;#app&quot;,    data: {        message: &apos;Hi!&apos;    }}) </code></pre><p>  通过这样我们已经把数据渲染进DOM，而且是响应式的。主要data里的message值发生变化，在页面上也会跟着变化。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p>当创建一个实例后，我们可以传入一个选项对象，下面列出一些常用选项：</p><ul><li>el</li><li>data</li><li>methods</li><li>computed</li></ul><h3 id="el"><a href="#el" class="headerlink" title="el"></a>el</h3><p> 选择挂载目标，可以是css选择器，也可以是html元素，在实例挂载后，元素可以通过vue.$el访问。</p><p> 如果是在实例化时存在这个选项，实例将立即进入编译过程，否则需要显式调用vue.$mount()手动开始编译。</p><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p> Vue实例的数据对象。Vue是响应式的数据变化的，因为Vue会递归的将data的属性转换为getter/setter。data对象必须是纯粹的对象，也就是含有零个或多个的键值对。</p><p> 实例创建后，可以通过vue.$data访问，并且Vue实例，也就是vue实际上也代理了data对象上的不是以“_”或者“$”开头的属性。也就是vue.$data.a等价于 vue.a.</p><pre><code>&lt;div id=&quot;app&quot;&gt;    {{message}}  //Hello,world&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        message: &quot;Hello world!&quot;    }});vue.$data.message === vue.message //true</code></pre><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><p> 用来定义一些方法，用这些方法是实现你想要的一些功能，比如点击事件，或者发送ajax请求等等。这些方法可以通过实例来访问，或者在指令表达式中使用，方法中的this会自动绑定为Vue实例。</p><pre><code>&lt;div id=&quot;app&quot;&gt;     {{message}}  //Hello     &lt;button v-on:click=&quot;show&quot;&gt;展示完整信息&lt;/button&gt;//点击按钮后会出现Hello,world!&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        message: &quot;Hello&quot;    },    methods: {        show: function() {            return message = + &quot;,world!&quot;        }    }})</code></pre><p> 在这个例子我们使用v-on命令，用来监听事件，这个命令下节会解释。我们在button标签里绑定了点击事件，所以一点击的时候，就会触发了show函数，该函数就会执行，所以message的值为“Hello,world！”。</p><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p> 计算属性，它是基于依赖进行缓存的，只有相关的依赖的值发生了改变，才会重新执行函数，否则只会返回之前的结果。</p><p> 类型：{[key: string]: Function|{get: Function,set: Function}}</p><pre><code>var vue = new Vue({    el: &quot;#app&quot;,    data: {        a: 1    },    computed: {        add: function() {             return this.a + 1        }    }})</code></pre><p> or</p><pre><code>var vue = new Vue({    el: &quot;#app&quot;,    data: {        a: 1    },    computed: {        add: {            get: function() {                return this.a + 1            },            set: function(data) {                this.a = data -1            }        }    }})</code></pre>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
